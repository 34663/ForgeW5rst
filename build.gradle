buildscript {
    repositories {
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }

        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0'
group = 'com.wurst' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'wurst'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }

    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }

    mavenCentral()
    jcenter()
}

configurations {
    jarLibs
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

    jarLibs('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'commons-io'
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'launchwrapper'
        exclude module: 'log4j-core' // we want to exclude this as well because 0.7.11 includes it too new for MC
    }

    // Hacky way to get mixin work
    annotationProcessor('org.spongepowered:mixin:0.8.2:processor') {
        exclude module: 'gson'
    }

    implementation configurations.jarLibs
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                'Manifest-Version': 1.0,
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,

                "Specification-Title"     : "wurst",
                "Specification-Vendor"    : "wurst",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "wurst",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
